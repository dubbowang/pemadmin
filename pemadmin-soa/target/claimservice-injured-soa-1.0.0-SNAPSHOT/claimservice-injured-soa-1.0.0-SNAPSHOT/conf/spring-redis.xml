<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.insuranceservices.redis.*" annotation-config="true" />

    <context:property-placeholder location="classpath:j2cache.properties" ignore-unresolvable="true"/>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--    允许创建资源的最大数量，默认值 -1，-1 代表无数量限制（int类型） -->
        <property name="maxTotal" value="${redis.maxTotal}"></property>
        <!--   最大空闲资源数，默认值 8 （int类型） -->
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <!--   最小空闲资源数，默认值 0  （int类型 ） -->
        <property name="minIdle" value="${redis.minIdle}"></property>
        <!--  获取资源时的等待时间，单位毫秒。当 blockWhenExhausted 配置为 true 时，此值有效。 -1 代表无时间限制，一直阻塞直到有可用的资源。（long类型） -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"></property>
        <!--  回收资源线程的执行周期，单位毫秒。默认值 -1 ，-1 表示不启用线程回收资源。（long类型） -->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}"></property>
        <!--  默认值 false ，当设置为true时，调用  factory.validateObject() 方法 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
        <!--  默认值 false，当设置为true时，调用  factory.validateObject() 方法 -->
        <property name="testOnReturn" value="${redis.testOnReturn}"></property>
        <!--  默认值 false； 设置为 true 时，当回收策略返回false时，则 调用 factory.activateObject()和factory.validateObject() -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}"></property>
    </bean>

    <bean id="jedisConnectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="timeout" value="${redis.timeout}" />
        <property name="database" value="${redis.database}" />
        <property name="password" value="${redis.password}" />
        <property name="usePool" value="true" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" p:connection-factory-ref="jedisConnectionFactory">
        <!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean  class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>

    <!-- 对string操作的封装 -->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" p:connection-factory-ref="jedisConnectionFactory" />

</beans>